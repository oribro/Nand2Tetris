// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
	static Array ram;
	static Array heap;
	static int lastPointerIndex;

    /** Initializes memory parameters. */
    function void init() {
		let ram=0;
		let heap = 2048;
		let lastPointerIndex = 0;
		let heap[0]= 0;
		let heap[1] = 14335;
		return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
    	return ram[address];
	}

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return; 
	}

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
		var int i, block, prevI, newSize;
		let i=0;
		let prevI=0;
		while (true) {
			if (heap[i+1] < (size+2)) {
				if (i = lastPointerIndex) {
					return -1; //error code
				}
				let prevI = i;
				let i = heap[i];
			}
			else {
				let newSize = heap[i+1] - (size+2); //new size of the block we took from.
				let heap[i+1] = newSize; //update size of the block we took from.
				let block = prevI+newSize; //base address of allocated block.
				let heap[block+1] = size; 				
				return block + 2048+2;
			}
		}
		return block + 2048 +2;
				
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
		let heap[lastPointerIndex] = object-2048-2;
		let lastPointerIndex = object-2048-2;
		return;	    
	}    
}
