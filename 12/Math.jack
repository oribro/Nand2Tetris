// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array arr;
	static int n;
    /** Initializes the library. */
    function void init() {
        var int j;
        var int sum;
		let n=16;
        let arr = Array.new(n);
        let j=1;
        let arr[0] = 1;
        while (j<n) {
			let arr[j] = arr[j-1] + arr[j-1];
			let j = j+1;
        }
		return;
    }
    function boolean bit(int x, int j) {
        if ((x & arr[j]) = 0) {
            return false;
        }
        return true;
    }
    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x<0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int j;
		var boolean isJOne;
		let j=0;
        let sum=0;
        let shiftedX=x;
        while (j<n) {
            let isJOne = Math.bit(y,j);
            if (isJOne) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
			let j = j+1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
		var int res;
		var boolean minus;
		let minus=false;
		if (x<0) {
			let minus = ~minus;
			let x = -x; 
		}
		if (y<0) {
			let minus= ~minus;
			let y=-y;
		}
        if (x=0){
            return 0;
        }
		if (y>x) {
			return 0;
		}
        let q = x/(y+y);
        if ((x-((q+q)*y)) < y) { //compute without multiply!
            let res=q+q;
        }
		else {
        	let res = (q+q)+1;
		}
		if (minus) {
			return -res;
		}
		return res;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int j, y, res;
		let y=0;
		let j=255;
		while (true) {
			let res = (y+j)*(y+j);
			if ((~(res>x)) & (res>0)) {
				let y=y+j;
			}
			if (j=0) {
				return y;
			}
			let j=j/2;
		}
		return y; 
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a>b) {
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a<b) {
			return a;
		}
		return b;
    }
}
