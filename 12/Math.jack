// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array arr;
	static int n;
	static int yq;
    /** Initializes the library. */
    function void init() {
        var int i,j;
		let n=16;
        let arr = Array.new(n);
        let j=0;
        let i = 1;
        while (j<n) {
			let arr[j] = i;
			let j = j+1;
			let i = i + 1;
			
        }
		return;
    }
    function boolean bit(int x, int j) {
        if ((x & arr[j]) = 0) {
            return false;
        }
        return true;
    }
	function int get2ToThe(int i) {
		return arr[i];
	}
    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x<0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int j;
		var boolean isJOne;
		let j=0;
        let sum=0;
        let shiftedX=x;
        while (j<n) {
            let isJOne = Math.bit(y,j);
            if (isJOne) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
			let j = j+1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int res;
		var boolean positiveResult;
		let positiveResult=false;
	
        if (x=0){
            return 0;
        }
        if (y=0){
       		return 0;
       	}
       	
       	if(((x < 0) & (y < 0)) | ((y > 0) & (x > 0))){
			let positiveResult=true;
	}
	let x = Math.abs(x);
	let y = Math.abs(y);
	let res = Math.innerDivide(x,y);


	if (~positiveResult) {
		return -res;
	}
	return res;
    }
	function int innerDivide(int x, int y)
	{
		var int q; //update 
	
		if (y>x) {
			let yq = 0;
			return 0;
		}
		
		if (y = x){
			let yq = 1;
			return 1;
		}
		
		if(y > 16382){
				let yq = y;
				return 1;
		}
        let q = Math.innerDivide(x, y+y);
		
	
        if ((x-yq) < y) { 
            return q+q;
        }
		else {
        	let yq = yq + y;
		}
		return q+q+1;
}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int j, y, res;
		let y=0;
		let j=7;
		while (j > -1) {
			let res = (y+arr[j])*(y+arr[j]);
			if ((~(res>x)) & (res>-1)) {
				let y=y+arr[j];
			}
			
			let j=j-1;
		}
		return y; 
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a>b) {
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a<b) {
			return a;
		}
		return b;
    }
}
