// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
	static Array screen;
    /** Initializes the Screen. */
    function void init() {
		let color=true;
		let screen = 16384;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = false;
        }
        return;		   
	}

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color=b;
		return;	
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address, bitNum, setBit;
		let address = (32*y)+(x/16);
		let bitNum=x & 15;
		let setBit=1;
		while (bitNum > 0) {
	    	let setBit=setBit*2;
	    	let bitNum=bitNum-1;
		}
		if (color) {
	    	let screen[address] = screen[address]|setBit;
		}
		else {
	    	let screen[address] = screen[address] & ~setBit;
		}
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a,b, dx, dy, difference, temp;
		if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
		let a=0; 
		let b=0; 
		let dx=Math.abs(x2-x1);
		let dy=Math.abs(y2-y1);
		if (dx=0) {	
			do Screen.drawVerticalLine(x1, y1, y2);
			return;
		}
		if (dy=0) {
			do Screen.drawHorizonalLine(x1,x2,y1);
		    return;
		}
		
		let difference=0;
		if (y1<y2) {
			while ((~(a>dx)) & (~(b>dy))) {
		    	do Screen.drawPixel(x1+a, y1+b);
		    	if (difference< 0) {
					let a=a+1;
					let difference = difference + dy;
		    	}
		    	else {
					let b=b+1;
					let difference = difference - dx;
		    	}
			}
		}
		else {
			while ((~(a>dx)) & (~(b>dy))) {
		    	do Screen.drawPixel(x1+a, y1-b);
		    	if (difference< 0) {
					let a=a+1;
					let difference = difference + dy;
		    	}
		    	else {
					let b=b+1;
					let difference = difference - dx;
		    	}
			}
		}
		return;
    }
	function void drawHorizonalLine(int x1, int x2, int y1) { 
		var int temp;
		if (x2<x1) {
			let temp=x1;
			let x1=x2;
			let x2=temp;
		}
	    while (~(x2<x1)) {
	        do Screen.drawPixel(x1, y1);
			let x1=x1+1;
	    }
		return;
	}
	function void drawVerticalLine(int x1, int y1, int y2) {
		var int temp; 
		if (y2<y1) {
			let temp=y1;
			let y1=y2;
			let y2=temp;
		}
	   	while (~(y2 < y1)) {
    		do Screen.drawPixel(x1, y1);
			let y1= y1+1;
	    }
	    return;
	}
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		while(~(y1 > y2)) {
            do Screen.drawHorizonalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
	}
    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy, sqrt;
		let dy=-r;
		while (dy<r) {
			let sqrt = Math.sqrt((r*r)-(dy*dy));
			do Screen.drawLine(x-sqrt, y+dy, x+sqrt, y+dy);
			let dy = dy+1;
		}
		return;    
	}
}
