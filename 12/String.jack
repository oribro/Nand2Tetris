// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array string;
	field int length;
	static boolean isNeg;
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
    	if (~(maxLength > 0)){
    		let string = null;
    		let length = 0;
    	}
    	else {
    	let string = Array.new(maxLength);
    	let length = 0;
    	}
    	return this;
    }

    /** Disposes this string. */
    method void dispose(){
    	if (~(string = null) ){
    		do string.dispose();
    	}
      	return;
    }

    /** Returns the current length of this string. */
    method int length() {
    	return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
    	if (j<0 | ~(j<length)){
    		return 0;
    	}
    	return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    	if (j<0 | ~(j<length)){
        	return;
    	}	
    	let string[j] = c;
    	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    	if (~(c = 0)){
    		let length = length + 1;
    		let string[length-1] = c;
    	}
    	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    	if (~(length < 1)){
    		let string[length-1] = 0;
    		let length = length - 1;
    	}
    	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
    	var int value;
    	var int digit;
    	var int i;
    	let value = 0;
    	let i = 0;
    	if (charAt(0) = 45){
    		let isNeg = true;
    		let i = 1;
    	}
    	while ((i < length) & (string[i] > 47) & (string[i] < 58)){
    		let digit = string[i] - 48;
    		let value = (value * 10) + digit;
    		let i = i + 1;
    	}
    	if (isNeg){
    		let value = -value;
    		let isNeg = false;
    	}
    	return value;
    }
	
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    	var int lastDigit;
    	var int c;
    	let length = 0;
    	if (val < 0){
    		let isNeg = true;
    		let val = Math.abs(val);
    	}
    	
  	// a%b = a - (a/b)*b
    	let lastDigit = val - ((val/10)*10);
    	let c = lastDigit + 48;
    	if (val < 10){
    		if (isNeg){
    			do appendChar(45);
    		}
    		do appendChar(c);
    		let isNeg = false;
    		return;
    	}
    	do setInt(val/10);
    	do appendChar(c);
    	return;
    }

    /** Returns the new line character. */
    function char newLine() {
    	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
    	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    	return 34;
    }
    
}
